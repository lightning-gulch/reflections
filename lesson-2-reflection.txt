What happens when you initialize a repository? Why do you need to do it?
  Creates/initializes the repository and the .git directory with the metadata
  that git uses to maintain the history of the repository since it was created.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area is different from the working directory in that it is a holding
  area for files that are ready to be commited. They can be removed from the
  staging area and edited in the working directory. This offers a controlled work
  flow of versioning your files/code.

How can you use the staging area to make sure you have one commit per logical
change?
  git diff with the --staged argument allows you to compare the changes that you
  have staged against the most recent commit highlighting the changes between the
  two. With this information you can identify if you are commiting per logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  Some situations when branches would be helpful in keeping your history organized are:
  - try out experimental features
  - trying out different languange versions
  - a development branch
  - compartmentalize pieces of work
  - do these while continuing on with master branch for fixes

How do the diagrams help you visualize the branch structure?
	The diagrams assist in seeing where we seperated from the master and the commits/changes
	that have been made to each. Can assist in determining what needs to be added back into
	one or the other branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The result of merging the two branches together is the changes from both branches are combined
	and the commit history for both branches are included. It is represented in the diagram 
	with arrows pointing from the new head back to the last commit on each branch. This is becuase
	it is the parent of both branches now and can refer back to the commmits along each branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Automatic merging seems like it would be a time saver when working with others but caution 
	is required. Testing is always required as some issues not flagged as conflicts can arise. An
	example being the addition of the function in the lecture. 
